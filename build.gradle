buildscript {
    ext {
        groovyVersion = '2.3.7'
        springBootVersion = '1.2.0.M2'
        springLoadedVersion = '1.2.1.RELEASE'
        springDataSolrVersion = '1.4.0.BUILD-SNAPSHOT'
        springCloudConfigVersion = '1.0.0.M1'
        oracleJDBCDriverVersion = '11.2.0.3'
        myBatisVersion = '3.2.7'
        myBatisSpringVersion = '1.2.2'
        spockVersion = '1.0-groovy-2.3-SNAPSHOT'
        guavaVersion = '18.0'
        swaggerSpringMVCVersion = '0.9.0-SNAPSHOT'
        swaggerSpringMVCUIVersion = '0.2'
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://oss.sonatype.org/content/repositories/github-releases' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework:springloaded:${springLoadedVersion}")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'idea'

    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.tomcat.embed') {
                details.useVersion '8.0.3'
            }
        }
    }

    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-release-local/' }
        maven { url 'http://gcartifacts.digitalriver.com/nexus/content/repositories/Internal1/' }
    }

    dependencies {
        compile("org.codehaus.groovy:groovy-all:${groovyVersion}")
        compile("com.google.guava:guava:${guavaVersion}")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.spockframework:spock-core:${spockVersion}")
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

project(':config-server') {
    apply plugin: 'spring-boot'

    dependencies {
        compile("org.springframework.cloud:spring-cloud-config-server:${springCloudConfigVersion}")
    }
}

project(':solr-client') {
    dependencies {
        compile("org.springframework.data:spring-data-solr:${springDataSolrVersion}")
    }
}

project(':admin-api') {
    apply plugin: 'spring-boot'

    dependencies {
        compile project(':solr-client')
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("com.mangofactory:swagger-springmvc:${swaggerSpringMVCVersion}")
        compile("org.ajar:swagger-spring-mvc-ui:${swaggerSpringMVCUIVersion}")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-jdbc")
        compile("org.springframework.cloud:spring-cloud-starter:${springCloudConfigVersion}")
        compile("org.mybatis:mybatis:${myBatisVersion}")
        compile("org.mybatis:mybatis-spring:${myBatisSpringVersion}")
        compile("oracle:ojdbc6:${oracleJDBCDriverVersion}")
    }
}

project(':store-api') {
    apply plugin: 'spring-boot'

    dependencies {
        compile project(':solr-client')
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("com.mangofactory:swagger-springmvc:${swaggerSpringMVCVersion}")
        compile("org.ajar:swagger-spring-mvc-ui:${swaggerSpringMVCUIVersion}")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.cloud:spring-cloud-starter:${springCloudConfigVersion}")
    }
}

project(':sample-site') {
    apply plugin: 'spring-boot'

    dependencies {
        compile project(':store-api')
    }
}
